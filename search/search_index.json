{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"KG-Hub Downloader | Documentation | Overview This is a configuration based file caching downloader with initial support for http requests & queries against elasticsearch. Installation KGHub Downloader is available to install via pip: pip install kghub-downloader Configure Download Configuration The downloader requires a YAML file which contains a list of target URLs to download, and local names to save those downloads. The format for the file is: --- - url : \"http://example.com/myawesomefile.tsv\" local_name : myawesomefile.tsv - url : \"http://example.com/myokfile.json\" local_name : myokfile.json You can also include any secrets like API keys you have set as environment variables using {VARIABLE_NAME} , for example: --- - url : \"https://example.com/myfancyfile.json?key={YOUR_SECRET}\" localname : myfancyfile.json Note: You MUST have this secret set as an environment variable, and be sure to include the {curly braces} Usage Downloader can be used directly in Python or via command line In Python: from kghub_downloader.download_utils import download_from_yaml download_from_yaml ( yaml_file = \"download.yaml\" , output_dir = \"data\" ) Command Line downloader --output_dir example_output --tags zfin_gene_to_phenotype example.yaml Note: If your YAML file is named download.yaml , the argument can be omitted from the CLI call. For example, downloader --output_dir example_output is equivalent to downloader --output_dir example_output download.yaml Command Line Arguments: - yaml_file : List of files to download in YAML format. Defaults to \"download.yaml\" - output_dir : Path to output directory. Defaults to current directory - ignore_cache : Optional boolean; if True ignores already downloaded files and download again. Defaults to False - tags : Optional list of tags, limits downloads to those with matching tags - mirror : Optional URL path to remote storage to backup download. Currently supports: Google Cloud Storage - Note: use full path to desired directory (ex. --mirror gs://your-bucket/desired/directory )","title":"Home"},{"location":"#kg-hub-downloader","text":"| Documentation |","title":"KG-Hub Downloader"},{"location":"#overview","text":"This is a configuration based file caching downloader with initial support for http requests & queries against elasticsearch.","title":"Overview"},{"location":"#installation","text":"KGHub Downloader is available to install via pip: pip install kghub-downloader","title":"Installation"},{"location":"#configure","text":"","title":"Configure"},{"location":"#download-configuration","text":"The downloader requires a YAML file which contains a list of target URLs to download, and local names to save those downloads. The format for the file is: --- - url : \"http://example.com/myawesomefile.tsv\" local_name : myawesomefile.tsv - url : \"http://example.com/myokfile.json\" local_name : myokfile.json You can also include any secrets like API keys you have set as environment variables using {VARIABLE_NAME} , for example: --- - url : \"https://example.com/myfancyfile.json?key={YOUR_SECRET}\" localname : myfancyfile.json Note: You MUST have this secret set as an environment variable, and be sure to include the {curly braces}","title":"Download Configuration"},{"location":"#usage","text":"Downloader can be used directly in Python or via command line","title":"Usage"},{"location":"#in-python","text":"from kghub_downloader.download_utils import download_from_yaml download_from_yaml ( yaml_file = \"download.yaml\" , output_dir = \"data\" )","title":"In Python:"},{"location":"#command-line","text":"downloader --output_dir example_output --tags zfin_gene_to_phenotype example.yaml Note: If your YAML file is named download.yaml , the argument can be omitted from the CLI call. For example, downloader --output_dir example_output is equivalent to downloader --output_dir example_output download.yaml Command Line Arguments: - yaml_file : List of files to download in YAML format. Defaults to \"download.yaml\" - output_dir : Path to output directory. Defaults to current directory - ignore_cache : Optional boolean; if True ignores already downloaded files and download again. Defaults to False - tags : Optional list of tags, limits downloads to those with matching tags - mirror : Optional URL path to remote storage to backup download. Currently supports: Google Cloud Storage - Note: use full path to desired directory (ex. --mirror gs://your-bucket/desired/directory )","title":"Command Line"}]}